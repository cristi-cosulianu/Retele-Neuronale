---------------------------> Operators <---------------------------

x ** y - rise x to the y power
x / y - 3.33 float
x // y - 3.0 float
x <> y - true if x != y
not y - negate xy
x is y - equal to x == y
x is not y - equal to x !=y
x and y - equal to x && y
x or y - equal to x || y
x in y - true if x is in y

break - get out of the loop
continue - get to the next iteration
lambda list_of_parameters : return_value


---------------------------> Strings <---------------------------

For s = Python
s[1] - "P"
s[-1] - "n"
s[:2] - "Py"
s[4:] - "on"
s[2:4] - "th"
s = "python" + "exam"
s = "fail" * 3

s.replace(what_to_replace, with_what_to_replace, [how_many_to_replace])
s.index(what_to_find) - index of what_to_find
s.rindex(what_to_find) - index of last what_to_find
s.find(what_to_find, start, end) - index of what_to_find
s.count(what_to_find, start, end) - number of what_to_find in s
s.split(separators_list, max_split) - split s where separator found
s.splitlines()
s.upper()
s.lower()
s.islower()
s.isupper()
s.isdigit()
s.strip([chars]) - remove the chars from s
s.encode(encoding=)


---------------------------> Lists <---------------------------

l.append(x) - add an element to list
l.extend(x) - add a list to list
l.insert(position, x) - insert x on position in list
l.remove(x) - remove from list
l.pop(index) - extract element from index 
l.clear() - makes the list empty
l.copy() - return a copy of the list
l.index(x) - return index of x in l
l.count(x) - return number of x's apparitions in l
l.reverse() - reverse the list
l.sort(key=,reverse=) - sort the list using key expresion (alterate the elements of list before sort)


---------------------------> Sets <---------------------------

Unique elements.
Elements can't be accessed.
No addition opperand between sets.
s.add(x) - add element x to set
s.remove(x) - remove's x from set but throw error if x is not in set
s.discard(x) - as remove but don't throw error
s.update(x) - to add a new set of elements
s.union(x) - return a new set with s U x
s.intersection(x) - return a new set with intersection between s and x
s.difference(x) - return a new set with the difference between s and x
s.symmetric_difference(x) - return symm diff between s and x
s.isdisjoint(x) - return true if they don't have common elements
s.issubset(x) - when s is an subset of x
s.issuperset(x) - when x is subset of x
s.pop()


---------------------------> Dictionaries <---------------------------

Has key, value pairs as elements.
d.setdefault(key, value) - add new key value pair in dict
d.update(dict) - add new key value pairs or update the old ones 
d.clear() - make d empty
d.copy() - return a copy of d that can be modified
d.fromkeys(list_of_keys, default_value)
d.get(key) - return the value for key in d
d.pop(key) - return the value for key and removes that pair from d
d.keys() - return the list of keys from d
d.values() - return the list of values from d
d.items() - return a list of tuples containing the key value pairs from d
del d["A"] - remove the pair with "A" key


---------------------------> Functions <---------------------------

function(*parameters) - arguments treated as a list (variable size)
function(**parameters) - arguments treated as a dicitonary
type(x) - return the type of x
list(x) - create a new list with x's content
tuple(x) - create a new tuple with x's content
set(x) - create a new set with x's content
chr(x) - x is unicode code value and returns the coresponding character 
ord(x) - returns the unicode of c (char)
hex(x) - conversts x number in lowercase hex representation
map(function, iterable) - return an iterable (has to be casted to a type)
round(x, nr_zecimals) -  round x with nr_zecimals
filter(function, iterable) - the function has to return boolean
                           - selects the elements that return true in function
max(x, key=) - return the biggest element from x (key=lambda)
min(x, key=) - return the smallest element from x (key=lambda)
sum(x, startValue) - sum all the elements from x
del(l[index]) - remove from list
sorted(x, key=, reverse=) - sort x by the comparation function key
all(x) - return true if all are true
any(x) - return true if at least one is true
zip(x,y) - return a list with tuples like (x1,y1) ... (xn,yn)
zip(*x) - to unzip

---------------------------> Exceptions <---------------------------

try -  for the code that is suspected to throw Exceptions
except Exception as variable_name - treat the Exceptions
else - will run if there is no exception in try block
finnaly - run after the try block it's completed

raise Exception(args) - raise an custom exception or predefined ones
assert condition, message
pass - in except block if you don't want to process an exception


---------------------------> Modules <---------------------------

import module1, module2, ... 
import module1 as m1 - to give alias to module
from module1 import object1, object2 - for classes
from module1 import * - same as import module1
dir(module) - return a list of functions/objects from that module

module1.__file__ - full path of the file that corresponds to the module
module1.__name__ - the name of the module
module1.__package__ - the name of the package

__name__ - from the script that is executed is __main__
         - from the imported files is the name of the module


---------------------------> Sys Module

sys.argv - list of parameters sent to the python script
sys.platform - the operating sistem
sys.stdin/.stdout/.stderr - handlers for default I/O operations
sys.path - list of string from where module will be loaded
sys.modules - dictionary with loaded modules
sys.version_info - python version

---------------------------> Os Module

os.listdir(path) - list of child files and folders of the path destination
os.chdir(path) - change current directory
os.mkdir(path) - create directory
os.rmdir(path) - remove directory
os.remove(path) - remove file
os.rename(path) - rename/move file

os.path.join(path1, path2) - join paths in one
os.path.dirname(path) - return the parent directory name
os.path.basename(path) - return the name of the file/directory
os.path.splitext(path) - split file name from extension
os.path.exists(path) - true if the path exists
os.path.isdir(path) - true if the path destination is directory
os.path.isfile(path) - true if the path destination is file
os.path.realpath(__file__) - current script path
os.access(path, os.R_OK) - if can read
os.access(path, os.W_OK) - if can write
os.stat(path).st_size - file size

os.walk(path) - recursively walk through path and return (root, dirs ,files) 

os.system(command) - to execute system commands

getpass.getuser() - to get user name
multiprocessing.cpu_count() - to get number of cores

---------------------------> Time Module

import time
time.time() - time in seconds
time.ctime() - 'Mon Jan  7 18:32:54 2019'
time.localtime(seconds) - return an time_object
time.gmtime(seconds)
time.sleep(seconds) - 

time_object.tm_year - current year
time_object.tm_mon - current month
time_object.tm_mday - current month day
time_object.tm_hour - current hour
time_object.tm_min - current min
time_object.tm_sec- current sec
time_object.tm_wday - current week day
time_object.tm_hour - current hour
time_object.tm_yday - current year day

time.asctime(time_object) - convert time_obj to readable representation (string format)
time.mktime(time_object) - to transform time_obj into number of seconds

time.strftime(time_format, time_object) - to format the time_obj
                                        - without time_obj is applied to current time
%H - 24 hour format
%I - 12 hour format
%Y - year (4 digits)
%m - month decimal
%B - month name
%M - minute
%S - seconds
%A - day of week (name)
%d - day of month (decimal)
%p - AM or PM


---------------------------> Hashlib Module

import hashlib - to compute cryptographic functions like (MD5, SHA-1, SHA-224, SHA-384, SHA-512)

h_obj = hashlib.md5() | .sha256() | etc
h_obj.update() - to update the hash value`
h_obj.digest() - compute final hash
h_obj.hexdigest() - hex compute final hash


---------------------------> JSON Module

import json - for data serialization JSON

json.dumps(d) - serialization of the dictionary d
json.loads(data) - de-serialization of the data


---------------------------> Pickle Module

import pickle - for data serialization using binary format

pickle.dumps()
pickle.loads()


---------------------------> Marshal Module

import marshal - for data serialization using binary format

marshal.dumps()
marshal.loads()


---------------------------> Random Module

import random
random.random() - to generate float number between 0 - 1
random.randint(min, max) - generate random int between min - max
random.choice(list) - selects a random elem from list
random.shuffle(list) - shuffles the list
random.sample(list, count) - create new list with count elements from list

---------------------------> ZipFile Module

import zipfile
z = zipfile.ZipFile(file_name) - open zipfile
z = zipfile.ZipFile(file_name, mode, compression) - compression can be ZIP_DEFLATED, ZIP_STORED, ZIP_BZIP2, ZIP_LZMA
z.extract(filename, destination_folder) - to extract file in destination_folder, the file name is the file path in zip file
z.extractall(destination_folder)
z.open(filename, mode, pwd) - to open a specific file from zipfile
                            - returns a file like object
z.write(filename, in_zip_name) - write a file in zip with filename as in_zip_name if in_zip_name it's not mentioned
z.writestr(in_zip_name, str) - create a file in zip with in_zip_name and with str as content

z.is_zipfile(filename)

z.infolist() - return list of files and directories from zipfile
    for i in z.infolist():
    i.filename - file path
    i.file_size - file size
    i.compress_size - file size in zip

---------------------------> Socket Module

import socket
s.gethostname() - current system IP
s.settimeout(seconds)
s.connect_ex((adress, port)) - return error code if connection not possible, 0 if it is possible

-----> SERVER
socket.socket(socket.AF_INET, socket.SOCK_STREAM) - to create socket
s.bind(adress, port) - adress string, port int
s.listen(max_nr_of_queued_conn) - how many client's to listen
s.accept() - return the pair (connection, adress)
connection.recv(nr_of_bytes).decode(coding_format) - receive data and decode it in readable format
connection.close()

-----> CLIENT
socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((adress, port))
s.send(binary_message)
s.close()


---------------------------> Urllib Module

import urllib
from urllib import request

urllib.request.urlopen("link").read()

---------------------------> Ftplib Module

from ftplib import FTP
client = FTP.connect(host, port)
client.login(user, pass) - default without user and pass as anonymus 
client.retrlines(command, call_back) - send command to FTP server and retrieves the results. The result is sent line by line to a callback function.
client.storbinary(command, call_back) - save file in a binary mode on FTP server.
client.retrbinary() - retrieves a binary file from FTP server.
client.rename() - rename file/folder
client.delete() - remove files
client.rmd() - remove directories



---------------------------> I/O <---------------------------

input(message) - return what was entered until enter key was pressed
print(arg1, arg2, arg3, ... , sep = separator, end = '\n', file=, flush=)
open(path, mode=, buffering=, encoding=, errors=, newline=, closefd=, opener=)

mode:
    - "r" - read
    - "rt" - to read the whole file and return a string
    - "rb" - to read the whole file and return a binary string
    - "w" - write
    - "x" - exclusive creation (fail if file is there)
    - "a" - append
    - "b" - binary 
    - "t" - text mode
    - "+" - update (read + write)

error - how to be processed conversion errors for the specified encoding
newline - what tot be considered as newline (if is none is the system default)

f.close - close file
f.tell - return the current in file position
f.seek - sets the current file position to a new position
f.read - read a number of bytes from file
f.write - write a number of bytes into a file
f.readline - reads a line from a file
f.writelines 
f.name - return the file name
f.mode - return the mode in which the file was opened
f.closed - true if the file was closed


---------------------------> Packages <---------------------------

Packages must be grouped in folders and need to have an __init__.py file
where the __all__ variable has to initialized with all the modules from
that package (ex: __all__ = ["module1", "module2"])

importlib - module to dynamically import modules
importlib.import_module("module1")

---------------------------> Regular Expressions <---------------------------

. - all characters except \n
^ - matches at the start of the string
$ - matches at the end of the string
* - repetition >= 0
+ - repetition >= 1
? - 0 or 1 occurrence
{x} - matches x times
{x,y} - matches between x and y times
[xyz] - one option from [] (x or y, or z)
| - or condition
\d - digits
\D - all except digits
\s - space, tab, new line
\S - all except \s
\w - words with letters a-z, A-Z and digits 0-9 with _
\ - escape character
[^x] - one character except x
() - group of characters
[...-...] - interval for a group of characters 

---------------------------> re Module

re.compile("regex") - to compile regex expression
re.match(regex_exp, string) - match regex_expression in string
re.serch(regex_exp, string) - return a match object
re.findall(regex_exp, string) - return a list with all substring that match the
                              - if (...) are used in regex_exp, return list of tuples
re.split(regex_exp, string) - return list of substring that did not matched regex_exp
                            - if (...) are used, the split is made after each group from regex_exp that is matched
re.sub(regex_exp, replace_string, string) - replace matched substrings from string by regex_exp with replace_string

(...) - it's named a group
(?P<name>...) - can be accessed if the group it's matched as result.group(name)
              - if you have more of these named groups you can access them as follows result.groupdict() with key the name of the group and the value is the actual match.
(?i) - apply the ignore case
(?s) - dot will match anything
(?=x) - match the previous expression only if the next one is x
(?!) - match only of the next ixpression does not match

match_object - group(index) - the substring that was matched

---------------------------> Classes <---------------------------

class <name>
    
    <data_member>
    mutable objects defined in class definition are static
    mutable objects defined in __init__ function are instance members
    data_members can be added at runtime:
    {
        class Point:
            p = Point()
            p.x = 10
    }
    <method>
    def __init__(self): - initialization method
    def method(self): - instance method
    def method(): - class method (static)

class <name> (Base1, Base2, ...) - where BaseN is a class from where to inherit
    def __init__(self):
        Base1.__init__(self) - the base init function it's not called automatic
        super.__init__(self) - another option

isistance(obj, Class) - obj is instance of class
issubclass(SubClass, Class) - SubClass is subclass of class

__init__ - initialization
__str__ - when obj needs to be converted into string


Inheriting it's overwriting all base class members and methods.

---------------------------> Threading <---------------------------

import _thread

_thread.start_new_thread(function, function_parameters_tuple)

import threading
thread = threading.Thread(target = function, args = (arg1, ))
thread.start() - start thread.
thread.join() - wait thread to finish.
thread.getName() - get thread name.
thread.setName(name) - set thread name.
thread.is_alive() - true if thread is alive.

---------------------------> Subclassing threading

class Mythread(threading.Thread):
    def __init__(self):
        threading.Thread.__init__(self)
        ...
    def run(self):
        ...

---------------------------> Lock

lock = threading.Lock()
lock.acquaire()
lock.release()
with lock:
    ...

---------------------------> Condition

condition = threading.Condition()
condition.wait()
condition.wait_for()
condition.notify()
condition.notify_all()

---------------------------> Semaphore

semaphore = threading.Semaphore(max_threads_to_enter)
with semaphore

---------------------------> Timer

timer = threading.Timer(time_to_wait, function, (arguments))
timer.start()
timer.join()
timer.cancel()

---------------------------> Event

event = threading.Event()
event.set()
event.wait()
event.clear()

---------------------------> Barrier

barrier = threading.Barrier(number_of_threads)
barrier.wait() - wait for number_of_threads to reach this point and start them at the same time
